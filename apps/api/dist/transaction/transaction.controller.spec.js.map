{"version":3,"sources":["../../src/transaction/transaction.controller.spec.ts"],"sourcesContent":["import { type TestingModule, Test } from '@nestjs/testing'\n\nimport { TransactionController } from './transaction.controller'\nimport { TransactionService } from './transaction.service'\n\ndescribe('TransactionController', () => {\n  let moduleRef: TestingModule\n  let transactionController: TransactionController\n  let transactionService: TransactionService\n\n  beforeEach(async () => {\n    moduleRef = await Test.createTestingModule({\n      controllers: [TransactionController],\n      providers: [\n        TransactionService,\n        {\n          provide: TransactionService,\n          useValue: {\n            create: vi.fn(),\n          },\n        },\n      ],\n    }).compile()\n\n    transactionController = moduleRef.get(TransactionController)\n    transactionService = moduleRef.get(TransactionService)\n  })\n\n  afterEach(async () => {\n    await moduleRef.close()\n  })\n\n  test('should be defined', () => {\n    expect(transactionController).toBeDefined()\n  })\n\n  describe('create', () => {\n    test('should return exchange rate', async () => {\n      const exchangeRate = 4.5\n\n      const transactionServiceCreateSpy = vi\n        .spyOn(transactionService, 'create')\n        .mockResolvedValue({\n          exchangeRate,\n          amountInPln: 450,\n          amountInEur: 100,\n          timestamp: new Date(),\n        })\n\n      expect(await transactionController.create(100)).toEqual({\n        exchangeRate,\n        amountInPln: 450,\n        amountInEur: 100,\n        timestamp: expect.any(Date),\n      })\n\n      expect(transactionServiceCreateSpy).toHaveBeenCalled()\n    })\n  })\n})\n"],"names":["describe","moduleRef","transactionController","transactionService","beforeEach","Test","createTestingModule","controllers","TransactionController","providers","TransactionService","provide","useValue","create","vi","fn","compile","get","afterEach","close","test","expect","toBeDefined","exchangeRate","transactionServiceCreateSpy","spyOn","mockResolvedValue","amountInPln","amountInEur","timestamp","Date","toEqual","any","toHaveBeenCalled"],"mappings":";;;;yBAAyC;uCAEH;oCACH;AAEnCA,SAAS,yBAAyB;IAChC,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTH,YAAY,MAAMI,aAAI,CAACC,mBAAmB,CAAC;YACzCC,aAAa;gBAACC,4CAAqB;aAAC;YACpCC,WAAW;gBACTC,sCAAkB;gBAClB;oBACEC,SAASD,sCAAkB;oBAC3BE,UAAU;wBACRC,QAAQC,GAAGC,EAAE;oBACf;gBACF;aACD;QACH,GAAGC,OAAO;QAEVd,wBAAwBD,UAAUgB,GAAG,CAACT,4CAAqB;QAC3DL,qBAAqBF,UAAUgB,GAAG,CAACP,sCAAkB;IACvD;IAEAQ,UAAU;QACR,MAAMjB,UAAUkB,KAAK;IACvB;IAEAC,KAAK,qBAAqB;QACxBC,OAAOnB,uBAAuBoB,WAAW;IAC3C;IAEAtB,SAAS,UAAU;QACjBoB,KAAK,+BAA+B;YAClC,MAAMG,eAAe;YAErB,MAAMC,8BAA8BV,GACjCW,KAAK,CAACtB,oBAAoB,UAC1BuB,iBAAiB,CAAC;gBACjBH;gBACAI,aAAa;gBACbC,aAAa;gBACbC,WAAW,IAAIC;YACjB;YAEFT,OAAO,MAAMnB,sBAAsBW,MAAM,CAAC,MAAMkB,OAAO,CAAC;gBACtDR;gBACAI,aAAa;gBACbC,aAAa;gBACbC,WAAWR,OAAOW,GAAG,CAACF;YACxB;YAEAT,OAAOG,6BAA6BS,gBAAgB;QACtD;IACF;AACF"}