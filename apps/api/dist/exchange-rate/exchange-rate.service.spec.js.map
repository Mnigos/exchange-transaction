{"version":3,"sources":["../../src/exchange-rate/exchange-rate.service.spec.ts"],"sourcesContent":["import { Test, type TestingModule } from '@nestjs/testing'\nimport { HttpModule, HttpService } from '@nestjs/axios'\nimport type { AxiosResponse } from 'axios'\nimport { of } from 'rxjs'\nimport { CACHE_MANAGER } from '@nestjs/cache-manager'\nimport type { Cache } from 'cache-manager'\nimport type { MockInstance } from 'vitest'\n\nimport { ExchangeRateService } from './exchange-rate.service'\n\nimport { EnvService } from '~/config/env'\n\ndescribe('ExchangeRateService', () => {\n  let moduleRef: TestingModule\n  let exchangeRateService: ExchangeRateService\n  let httpService: HttpService\n  let cacheManager: Cache\n\n  beforeEach(async () => {\n    moduleRef = await Test.createTestingModule({\n      imports: [HttpModule],\n      providers: [\n        ExchangeRateService,\n        {\n          provide: EnvService,\n          useValue: {\n            get: vi.fn().mockReturnValue(''),\n          },\n        },\n        {\n          provide: CACHE_MANAGER,\n          useValue: {\n            get: vi.fn(),\n            set: vi.fn(),\n          },\n        },\n      ],\n    }).compile()\n\n    exchangeRateService = moduleRef.get(ExchangeRateService)\n    httpService = moduleRef.get(HttpService)\n    cacheManager = moduleRef.get(CACHE_MANAGER)\n  })\n\n  afterEach(async () => {\n    await moduleRef.close()\n  })\n\n  test('should be defined', () => {\n    expect(exchangeRateService).toBeDefined()\n  })\n\n  describe('get', () => {\n    const exchangeRate = 4.5\n\n    let cacheManagerGetSpy: MockInstance<Cache['get']>\n    let cacheManagerSetSpy: MockInstance<Cache['set']>\n    let httpGetSpy: MockInstance<HttpService['get']>\n\n    beforeEach(() => {\n      cacheManagerGetSpy = vi.spyOn(cacheManager, 'get')\n      cacheManagerSetSpy = vi.spyOn(cacheManager, 'set')\n      httpGetSpy = vi.spyOn(httpService, 'get')\n    })\n\n    test('should return not cached exchange rate', async () => {\n      cacheManagerGetSpy.mockResolvedValue(null)\n      httpGetSpy.mockReturnValue(\n        of({\n          data: {\n            exchange_rate: exchangeRate,\n          },\n        } as AxiosResponse)\n      )\n\n      expect(await exchangeRateService.get()).toEqual(exchangeRate)\n\n      expect(cacheManagerGetSpy).toHaveBeenCalled()\n      expect(httpGetSpy).toHaveBeenCalled()\n      expect(cacheManagerSetSpy).toHaveBeenCalledWith(\n        'exchange-rate',\n        exchangeRate\n      )\n    })\n\n    test('should return cached exchange rate', async () => {\n      cacheManagerGetSpy.mockResolvedValue(exchangeRate)\n\n      expect(await exchangeRateService.get()).toEqual(exchangeRate)\n\n      expect(cacheManagerGetSpy).toHaveBeenCalled()\n      expect(httpGetSpy).not.toHaveBeenCalled()\n      expect(cacheManagerSetSpy).not.toHaveBeenCalled()\n    })\n  })\n})\n"],"names":["describe","moduleRef","exchangeRateService","httpService","cacheManager","beforeEach","Test","createTestingModule","imports","HttpModule","providers","ExchangeRateService","provide","EnvService","useValue","get","vi","fn","mockReturnValue","CACHE_MANAGER","set","compile","HttpService","afterEach","close","test","expect","toBeDefined","exchangeRate","cacheManagerGetSpy","cacheManagerSetSpy","httpGetSpy","spyOn","mockResolvedValue","of","data","exchange_rate","toEqual","toHaveBeenCalled","toHaveBeenCalledWith","not"],"mappings":";;;;yBAAyC;uBACD;sBAErB;8BACW;qCAIM;qBAET;AAE3BA,SAAS,uBAAuB;IAC9B,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IACJ,IAAIC;IAEJC,WAAW;QACTJ,YAAY,MAAMK,aAAI,CAACC,mBAAmB,CAAC;YACzCC,SAAS;gBAACC,iBAAU;aAAC;YACrBC,WAAW;gBACTC,wCAAmB;gBACnB;oBACEC,SAASC,eAAU;oBACnBC,UAAU;wBACRC,KAAKC,GAAGC,EAAE,GAAGC,eAAe,CAAC;oBAC/B;gBACF;gBACA;oBACEN,SAASO,2BAAa;oBACtBL,UAAU;wBACRC,KAAKC,GAAGC,EAAE;wBACVG,KAAKJ,GAAGC,EAAE;oBACZ;gBACF;aACD;QACH,GAAGI,OAAO;QAEVnB,sBAAsBD,UAAUc,GAAG,CAACJ,wCAAmB;QACvDR,cAAcF,UAAUc,GAAG,CAACO,kBAAW;QACvClB,eAAeH,UAAUc,GAAG,CAACI,2BAAa;IAC5C;IAEAI,UAAU;QACR,MAAMtB,UAAUuB,KAAK;IACvB;IAEAC,KAAK,qBAAqB;QACxBC,OAAOxB,qBAAqByB,WAAW;IACzC;IAEA3B,SAAS,OAAO;QACd,MAAM4B,eAAe;QAErB,IAAIC;QACJ,IAAIC;QACJ,IAAIC;QAEJ1B,WAAW;YACTwB,qBAAqBb,GAAGgB,KAAK,CAAC5B,cAAc;YAC5C0B,qBAAqBd,GAAGgB,KAAK,CAAC5B,cAAc;YAC5C2B,aAAaf,GAAGgB,KAAK,CAAC7B,aAAa;QACrC;QAEAsB,KAAK,0CAA0C;YAC7CI,mBAAmBI,iBAAiB,CAAC;YACrCF,WAAWb,eAAe,CACxBgB,IAAAA,QAAE,EAAC;gBACDC,MAAM;oBACJC,eAAeR;gBACjB;YACF;YAGFF,OAAO,MAAMxB,oBAAoBa,GAAG,IAAIsB,OAAO,CAACT;YAEhDF,OAAOG,oBAAoBS,gBAAgB;YAC3CZ,OAAOK,YAAYO,gBAAgB;YACnCZ,OAAOI,oBAAoBS,oBAAoB,CAC7C,iBACAX;QAEJ;QAEAH,KAAK,sCAAsC;YACzCI,mBAAmBI,iBAAiB,CAACL;YAErCF,OAAO,MAAMxB,oBAAoBa,GAAG,IAAIsB,OAAO,CAACT;YAEhDF,OAAOG,oBAAoBS,gBAAgB;YAC3CZ,OAAOK,YAAYS,GAAG,CAACF,gBAAgB;YACvCZ,OAAOI,oBAAoBU,GAAG,CAACF,gBAAgB;QACjD;IACF;AACF"}