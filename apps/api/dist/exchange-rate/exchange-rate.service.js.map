{"version":3,"sources":["../../src/exchange-rate/exchange-rate.service.ts"],"sourcesContent":["import { HttpService } from '@nestjs/axios'\nimport { CACHE_MANAGER } from '@nestjs/cache-manager'\nimport { Inject, Injectable } from '@nestjs/common'\nimport { firstValueFrom } from 'rxjs'\nimport type { Cache } from 'cache-manager'\n\nimport { EnvService } from '~/config/env'\n\n@Injectable()\nexport class ExchangeRateService {\n  constructor(\n    private readonly httpService: HttpService,\n    private readonly envService: EnvService,\n    @Inject(CACHE_MANAGER) private readonly cacheManager: Cache\n  ) {}\n\n  async get() {\n    const cachedExchangeRate =\n      await this.cacheManager.get<number>('exchange-rate')\n\n    if (cachedExchangeRate) return cachedExchangeRate\n\n    const { data } = await firstValueFrom(\n      this.httpService.get<{ exchange_rate: number }>(\n        this.envService.get('API_URL'),\n        {\n          headers: {\n            'x-api-key': this.envService.get('API_KEY'),\n          },\n        }\n      )\n    )\n\n    const exchangeRate = data.exchange_rate\n\n    await this.cacheManager.set('exchange-rate', exchangeRate)\n\n    return exchangeRate\n  }\n}\n"],"names":["ExchangeRateService","constructor","httpService","envService","cacheManager","get","cachedExchangeRate","data","firstValueFrom","headers","exchangeRate","exchange_rate","set"],"mappings":";;;;+BASaA;;;eAAAA;;;uBATe;8BACE;wBACK;sBACJ;qBAGJ;;;;;;;;;;;;;;;AAGpB,IAAA,AAAMA,sBAAN,MAAMA;IACXC,YACE,AAAiBC,WAAwB,EACzC,AAAiBC,UAAsB,EACvC,AAAwCC,YAAmB,CAC3D;aAHiBF,cAAAA;aACAC,aAAAA;aACuBC,eAAAA;IACvC;IAEH,MAAMC,MAAM;QACV,MAAMC,qBACJ,MAAM,IAAI,CAACF,YAAY,CAACC,GAAG,CAAS;QAEtC,IAAIC,oBAAoB,OAAOA;QAE/B,MAAM,EAAEC,IAAI,EAAE,GAAG,MAAMC,IAAAA,oBAAc,EACnC,IAAI,CAACN,WAAW,CAACG,GAAG,CAClB,IAAI,CAACF,UAAU,CAACE,GAAG,CAAC,YACpB;YACEI,SAAS;gBACP,aAAa,IAAI,CAACN,UAAU,CAACE,GAAG,CAAC;YACnC;QACF;QAIJ,MAAMK,eAAeH,KAAKI,aAAa;QAEvC,MAAM,IAAI,CAACP,YAAY,CAACQ,GAAG,CAAC,iBAAiBF;QAE7C,OAAOA;IACT;AACF"}